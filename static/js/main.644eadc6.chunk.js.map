{"version":3,"sources":["components/ShowName.js","components/MovieName.js","projectConfig.js","utils/http.js","services/apiServices.js","utils/interpolate.js","components/MediaCard.js","utils/imgUrlMaker.js","components/MediaColumn.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["ShowName","info","name","MovieName","title","projectConfig","apiURI","process","imgURL","token","trendingUrl","genreUrl","http","axios","create","baseURL","headers","interceptors","request","use","config","accessToken","Authorization","fetchTrendingMedia","mediaType","timeWindow","a","url","get","response","fetchGenres","fetchExternalIds","tmdbId","findImdbId","id","media_type","externalId","imdbId","data","imdb_id","getImdbUrl","tmdbid","MediaCard","props","makeImdbUrl","state","imdbUrl","setState","this","DashboardContext","Consumer","genre","path","filteredGenreNames","filter","genreList","genre_ids","includes","map","genres","className","href","target","rel","src","poster_path","alt","vote_average","index","key","overview","substring","Component","MediaColumn","results","result","React","createContext","Dashboard","fetchMovies","console","log","fetchShows","storeGenres","movies","shows","Promise","all","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAYeA,EATE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACf,8BAAOA,EAAKC,OCQCC,EATG,SAAC,GAAD,IAAEF,EAAF,EAAEA,KAAF,OAChB,8BAAOA,EAAKG,QCADC,EAAgB,CAC3BC,OAASC,+BACTC,OAASD,kCACTE,MAAQF,sNACRG,YAAaH,wCACbI,SAAWJ,iD,YCLPK,E,OAAOC,EAAMC,OAAO,CACxBC,QAASV,EAAcC,OACvBU,QAAS,CACP,eAAgB,sBAOpBJ,EAAKK,aAAaC,QAAQC,KAAI,SAAAC,GAC5B,IAAMC,EAAchB,EAAcI,MAMlC,OAJIY,IACFD,EAAOJ,QAAQM,cAAf,iBAAyCD,IAGpCD,KAGMR,QCpBR,SAAeW,EAAtB,oC,4CAAO,WAAkCC,EAAWC,GAA7C,iBAAAC,EAAA,6DACAC,EADA,UACStB,EAAcK,YADvB,YACsCc,EADtC,YACmDC,GADnD,SAEiBb,EAAKgB,IAAID,GAF1B,cAEAE,EAFA,yBAICA,GAJD,4C,sBAOA,SAAeC,IAAtB,+B,4CAAO,8BAAAJ,EAAA,6DACCC,EAAMtB,EAAcM,SADrB,SAEkBC,EAAKgB,IAAID,GAF3B,cAECE,EAFD,yBAIEA,GAJF,4C,sBAOA,SAAeE,EAAtB,oC,4CAAO,WAAgCC,EAAQR,GAAxC,iBAAAE,EAAA,6DACCC,EADD,UACUtB,EAAcC,OADxB,YACkCkB,EADlC,YAC+CQ,EAD/C,0BAEkBpB,EAAKgB,IAAID,GAF3B,cAECE,EAFD,yBAIEA,GAJF,4C,sBCOA,SAAeI,EAAtB,oC,4CAAO,WAA0BC,EAAIC,GAA9B,iBAAAT,EAAA,sEACoBK,EAAiBG,EAAIC,GADzC,cACCC,EADD,OAECC,EAASD,EAAWE,KAAKC,QAF1B,kBAIEF,GAJF,4C,sBAOA,SAAeG,EAAtB,oC,4CAAO,WAA0BC,EAAQjB,GAAlC,iBAAAE,EAAA,sEACgBO,EAAWQ,EAAOjB,GADlC,cACCa,EADD,OAECV,EAAM,0BAA0BU,EAFjC,kBAIEV,GAJF,4C,0BCiCQe,E,YAxDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,YAPmB,sBAOL,4BAAAlB,EAAA,sEACUc,EAAW,EAAKK,MAAM5C,KAAKiC,GAAI,EAAKW,MAAM5C,KAAKkC,YADzD,OACNW,EADM,OAEZ,EAAKC,SAAS,CACZD,QAASA,IAHC,2CALZ,EAAKD,MAAQ,CACX5C,KAAM0C,EAAM1C,KACZ6C,QAAS,IAJM,E,iFAejBE,KAAKJ,gB,+BAEG,IAAD,OACP,OACE,kBAACK,EAAiBC,SAAlB,MACC,SAAAC,GACC,IC5BoBC,ED6BdC,EADiBF,EAAMG,QAAO,SAAAC,GAAS,OAAI,EAAKV,MAAM5C,KAAKuD,UAAUC,SAASF,EAAUrB,OACpDwB,KAAI,SAAAC,GAAM,OAAIA,EAAOzD,QAC/D,OACA,yBAAK0D,UAAU,QACf,uBAAGC,KAAM,EAAKhB,MAAMC,QAASgB,OAAO,SAASC,IAAI,uBAC/C,yBACEC,KClCgBZ,EDkCC,EAAKP,MAAM5C,KAAKgE,YCjClC,UAAM5D,EAAcG,OAApB,YAA8B4C,IDkC7Bc,IAAI,sBACJN,UAAU,eAGZ,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QAAQ,EAAKf,MAAM5C,KAAKkE,aAAa,0BAAMP,UAAU,aAAhB,QACpD,yBAAKA,UAAU,eACmB,UAA/B,EAAKf,MAAM5C,KAAKkC,WACf,kBAAC,EAAD,CAAWlC,KAAM,EAAK4C,MAAM5C,OAE5B,kBAAC,EAAD,CAAUA,KAAM,EAAK4C,MAAM5C,QAG/B,6BACGoD,EAAmBK,KAAI,SAACP,EAAMiB,GAAP,OAAiB,wBAAIR,UAAU,aAAaS,IAAKD,GAAQjB,OAEnF,6BAASS,UAAU,kBAChB,EAAKf,MAAM5C,KAAKqE,SAASC,UAAU,EAAG,KAAK,uBAAGV,KAAM,EAAKhB,MAAMC,QAASiB,IAAI,sBAAsBH,UAAU,aAAjE,iB,GA9ClCY,aEWTC,EAfK,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAStE,EAAZ,EAAYA,MAAZ,OAChB,yBAAKwD,UAAU,OACb,8BAAOxD,GACP,yBAAKwD,UAAU,OACZc,EAAQhB,KAAI,SAACiB,EAAOP,GACnB,OAAO,kBAAC,EAAD,CAAWnE,KAAM0E,EAAQN,IAAKD,UCLlCnB,EAAmB2B,IAAMC,gBAmEvBC,E,YAjEb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRoC,YATmB,sBASL,8BAAArD,EAAA,+EAEaH,EAAmB,QAAS,EAAKsB,MAAMpB,YAFpD,qBAEFa,EAFE,EAEFA,QACIA,EAAKoC,QAHP,yCAIDpC,EAAKoC,SAJJ,uDAOVM,QAAQC,IAAR,MAPU,yDATK,EAoBnBC,WApBmB,sBAoBN,8BAAAxD,EAAA,+EAEcH,EAAmB,KAAM,EAAKsB,MAAMpB,YAFlD,qBAEDa,EAFC,EAEDA,QACIA,EAAKoC,QAHR,yCAIApC,EAAKoC,SAJL,uDAOTM,QAAQC,IAAR,MAPS,yDApBM,EA8BnBE,YA9BmB,sBA8BL,8BAAAzD,EAAA,+EAEWI,IAFX,qBAEHQ,EAFG,EAEHA,MAFG,yCAIDA,EAAKqB,QAJJ,uDAOVqB,QAAQC,IAAR,MAPU,yDA5BZ,EAAKpC,MAAQ,CACXpB,WAAY,MACZ2D,OAAQ,GACRC,MAAO,GACP1B,OAAQ,IANO,E,yNA2CqB2B,QAAQC,IAAI,CAChDvC,KAAK+B,cACL/B,KAAKkC,aACLlC,KAAKmC,gB,mCAHAC,E,KAAQC,E,KAAO1B,E,KAKtBX,KAAKD,SAAS,CAACqC,OAAQA,EAAQC,MAAOA,EAAO1B,OAAQA,I,qIAKrD,OACE,yBAAKC,UAAU,aACb,kBAACX,EAAiBuC,SAAlB,CAA2BC,MAAOzC,KAAKH,MAAMc,QAC1CX,KAAKH,MAAMwC,OAAQ,kBAAC,EAAD,CAAaX,QAAS1B,KAAKH,MAAMwC,MAAOjF,MAAM,sBACjE4C,KAAKH,MAAMuC,QAAU,kBAAC,EAAD,CAAaV,QAAS1B,KAAKH,MAAMuC,OAAQhF,MAAM,0B,GA1DvDoE,aCUTkB,MAZf,WACE,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,kBACX,kBAAC,EAAD,UCIQ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.644eadc6.chunk.js","sourcesContent":["import React from \"react\";\nimport {PropTypes} from 'prop-types';\n\nconst ShowName = ({info}) => (\n  <span>{info.name}</span>\n);\n\nShowName.propTypes = {\n  info: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n}\nexport default ShowName;","import React from \"react\";\nimport {PropTypes} from 'prop-types';\n\nconst MovieName = ({info}) => (\n  <span>{info.title}</span>\n);\n\nMovieName.propTypes = {\n  info: PropTypes.shape({\n    title: PropTypes.string.isRequired\n  })\n}\nexport default MovieName;","const trendingUrl = '/trending';\nconst posterSize = '/w185';\nconst genres = '/genre/movie/list';\n\nexport const projectConfig = {\n  apiURI : process.env.REACT_APP_API_URL,\n  imgURL : process.env.REACT_APP_IMG_URL + posterSize,\n  token : process.env.REACT_APP_API_TOKEN,\n  trendingUrl: process.env.REACT_APP_API_URL + trendingUrl,\n  genreUrl : process.env.REACT_APP_API_URL + genres\n}","import axios from 'axios';\n\nimport { projectConfig } from '../projectConfig';\n\nconst http = axios.create({\n  baseURL: projectConfig.apiURI,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * HTTP request interceptor.\n */\nhttp.interceptors.request.use(config => {\n  const accessToken = projectConfig.token;\n\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  return config;\n});\n\nexport default http;","import http from '../utils/http';\nimport { projectConfig } from '../projectConfig';\n\n\nexport async function fetchTrendingMedia(mediaType, timeWindow) {\n\tconst url = `${projectConfig.trendingUrl}/${mediaType}/${timeWindow}`;\n\tconst response = await http.get(url);\n\n\treturn response;\n}\n\nexport async function fetchGenres() {\n  const url = projectConfig.genreUrl;\n  const response = await http.get(url);\n\n  return response;\n}\n\nexport async function fetchExternalIds(tmdbId, mediaType) {\n  const url = `${projectConfig.apiURI}/${mediaType}/${tmdbId}/external_ids`;\n  const response = await http.get(url);\n\n  return response;\n}","import { fetchExternalIds } from \"src/services/apiServices\";\n\n/**\n * Build supplied string by interpolating properties inside delimiters('{ }') with the given parameters.\n *\n * @example\n * interpolate(':name is here.', {name: 'Barbara'})\n * => 'Barbaba is here.'\n *\n * @param {string} str\n * @param {object} params\n * @returns {string}\n */\nexport function interpolate(str, params) {\n  let formattedString = str;\n\n  for (const [key, value] of Object.entries(params)) {\n    const val = value || '';\n\n    formattedString = formattedString.replace(new RegExp(':' + key, 'gi'), val.toString());\n  }\n\n  return formattedString;\n}\n\nexport async function findImdbId(id, media_type) {\n  const externalId = await fetchExternalIds(id, media_type);\n  const imdbId = externalId.data.imdb_id;\n  \n  return imdbId;\n}\n\nexport async function getImdbUrl(tmdbid, mediaType) {\n  const imdbId = await findImdbId(tmdbid,mediaType);\n  const url = 'https://imdb.com/title/'+imdbId;\n  \n  return url;\n}","import React, {Component} from 'react';\nimport ShowName from 'src/components/ShowName';\nimport MovieName from 'src/components/MovieName';\nimport {imgUrlMaker} from '../utils/imgUrlMaker';\nimport {DashboardContext} from \"src/components/Dashboard\";\nimport { getImdbUrl } from 'src/utils/interpolate';\n\n\nclass MediaCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: props.info,\n      imdbUrl: ''\n    }\n  }\n  makeImdbUrl = async() => {\n    const imdbUrl = await getImdbUrl(this.state.info.id, this.state.info.media_type);\n    this.setState({\n      imdbUrl: imdbUrl\n    });\n  }\n\n  componentDidMount() {\n    this.makeImdbUrl()\n  }\n  render() {\n    return (\n      <DashboardContext.Consumer>\n      {genre => {\n        const filteredGenres = genre.filter(genreList => this.state.info.genre_ids.includes(genreList.id));\n        const filteredGenreNames = filteredGenres.map(genres => genres.name)\n        return (\n        <div className=\"card\">\n        <a href={this.state.imdbUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img\n            src={imgUrlMaker(this.state.info.poster_path)}\n            alt=\"shows of thumbnails\"\n            className=\"thumbnail\"\n          />\n        </a>\n          <div className=\"media-body\">\n            <div className=\"vote\">{this.state.info.vote_average}<span className=\"out-of-10\">/10</span></div>\n            <div className=\"media-title\">\n              {this.state.info.media_type === 'movie' ? (\n                <MovieName info={this.state.info} />\n              ) : (\n                <ShowName info={this.state.info} />\n              )}\n            </div>\n            <div>\n              {filteredGenreNames.map((genre,index) => <li className=\"genre-list\" key={index}>{genre}</li>)}\n            </div>\n            <article className=\"movie-overview\">\n              {this.state.info.overview.substring(0, 200)}<a href={this.state.imdbUrl} rel=\"noopener noreferrer\" className=\"read-more\">...</a>\n            </article>\n          </div>\n        </div>\n        )\n      }}\n\t</DashboardContext.Consumer>\n    )\n  }\n}\n\nexport default MediaCard;","import {projectConfig} from '../projectConfig';\n\nexport function imgUrlMaker(path) {\n  const url = `${projectConfig.imgURL}/${path}`;\n\n  return url\n}\n","import React from 'react';\nimport MediaCard from './MediaCard';\nimport {PropTypes} from 'prop-types';\n\nconst MediaColumn = ({ results, title }) => (\n    <div className=\"bar\">\n      <span>{title}</span>\n      <div className=\"row\">\n        {results.map((result,index)=> {\n          return <MediaCard info={result} key={index}/>\n        })}\n      </div>\n    </div>\n  );\n\nMediaColumn.propTypes = {\n  results: PropTypes.array,\n  title: PropTypes.string\n}\nexport default MediaColumn;","import React, {Component} from 'react';\nimport MediaColumn from './MediaColumn';\nimport {fetchTrendingMedia, fetchGenres} from 'src/services/apiServices';\n\nexport const DashboardContext = React.createContext();\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeWindow: 'day',\n      movies: [],\n      shows: [],\n      genres: []\n    }\n  }\n  fetchMovies = async() => {\n    try {\n      const { data } = await fetchTrendingMedia('movie', this.state.timeWindow);\n      if (data && data.results) {\n        return data.results;\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  fetchShows = async() => {\n    try {\n      const { data } = await fetchTrendingMedia('tv', this.state.timeWindow);\n      if (data && data.results) {\n        return data.results;\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  storeGenres = async() => {\n    try {\n      const {data} = await fetchGenres();\n      if (data) {\n        return data.genres;\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  async componentDidMount() {\n    const [movies, shows, genres] = await Promise.all([\n      this.fetchMovies(),\n      this.fetchShows(),\n      this.storeGenres()\n    ]);\n    this.setState({movies: movies, shows: shows, genres: genres});\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <DashboardContext.Provider value={this.state.genres}>\n          {this.state.shows &&<MediaColumn results={this.state.shows} title='Trending TV Shows'/>}\n          {this.state.movies && <MediaColumn results={this.state.movies} title='Trending Movies'/>}\n        </DashboardContext.Provider>\n      </div>\n\n    )\n  }\n\n}\nexport default Dashboard;","import React from 'react';\nimport Dashboard from 'src/components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container-wrap\">\n            <Dashboard/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'src/assets/css/reset.css';\nimport 'src/assets/css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}