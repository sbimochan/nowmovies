{"version":3,"sources":["projectConfig.js","utils/http.js","services/apiServices.js","components/MediaColumn.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","projectConfig","apiURI","imgURL","token","process","trendingUrl","genreUrl","http","axios","create","baseURL","headers","interceptors","request","use","config","accessToken","Authorization","fetchTrendingMedia","mediaType","timeWindow","a","url","get","response","fetchGenres","fetchExternalIds","tmdbId","MediaCard","React","lazy","CardSkeleton","classes","makeStyles","root","backgroundColor","useStyles","Box","Skeleton","variant","width","height","MediaColumn","results","title","className","Typography","map","result","index","fallback","key","info","DashboardContext","createContext","Dashboard","props","fetchMovies","state","data","fetchShows","storeGenres","genres","movies","shows","Promise","all","this","setState","Grid","container","justify","alignItems","style","overflowY","Provider","value","item","md","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAA,sCAAMA,EAAS,+BAKFC,EAAgB,CAC3BC,OAAQF,EACRG,OAAQ,sCACRC,MAAOC,sNACPC,YAAaN,EARK,YASlBO,SAAUP,EAPG,sB,oFCCTQ,EAAOC,IAAMC,OAAO,CACxBC,QAASV,IAAcC,OACvBU,QAAS,CACP,eAAgB,sBAOpBJ,EAAKK,aAAaC,QAAQC,KAAI,SAACC,GAC7B,IAAMC,EAAchB,IAAcG,MAMlC,OAJIa,IACFD,EAAOJ,QAAQM,cAAf,iBAAyCD,IAGpCD,KAGMR,QCrBR,SAAeW,EAAtB,oC,4CAAO,WAAkCC,EAAWC,GAA7C,iBAAAC,EAAA,6DACCC,EADD,UACUtB,IAAcK,YADxB,YACuCc,EADvC,YACoDC,GADpD,SAEkBb,EAAKgB,IAAID,GAF3B,cAECE,EAFD,yBAIEA,GAJF,4C,sBAOA,SAAeC,IAAtB,+B,4CAAO,8BAAAJ,EAAA,6DACCC,EAAMtB,IAAcM,SADrB,SAEkBC,EAAKgB,IAAID,GAF3B,cAECE,EAFD,yBAIEA,GAJF,4C,sBAOA,SAAeE,EAAtB,oC,4CAAO,WAAgCC,EAAQR,GAAxC,iBAAAE,EAAA,6DACCC,EADD,UACUtB,IAAcC,OADxB,YACkCkB,EADlC,YAC+CQ,EAD/C,0BAEkBpB,EAAKgB,IAAID,GAF3B,cAECE,EAFD,yBAIEA,GAJF,4C,gRCXDI,EAAYC,IAAMC,MAAK,kBAAM,uDAmB7BC,EAAe,WACnB,IAKMC,EALYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,gBAAiB,cAGLC,GAEhB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKR,QAAS,CAAEE,KAAMF,EAAQE,QAC9D,kBAACI,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,IAAKC,OAAQ,IAAKT,QAAS,CAAEE,KAAMF,EAAQE,UASlEQ,EArCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,OAClB,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAYP,QAAQ,KAAKM,UAAU,WAChCD,GAEH,yBAAKC,UAAU,OACZF,EAAQI,KAAI,SAACC,EAAQC,GACpB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,MAAkBC,IAAKF,GACzC,kBAACrB,EAAD,CAAWwB,KAAMJ,EAAQG,IAAKF,W,kDCZnC,IAAMI,EAAmBxB,IAAMyB,gBAChCC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,YATmB,sBASL,8BAAApC,EAAA,+EAEaH,YAAmB,QAAS,EAAKwC,MAAMtC,YAFpD,qBAEFuC,EAFE,EAEFA,QAEIA,EAAKhB,QAJP,yCAKDgB,EAAKhB,SALJ,gHATK,EAqBnBiB,WArBmB,sBAqBN,8BAAAvC,EAAA,+EAEcH,YAAmB,KAAM,EAAKwC,MAAMtC,YAFlD,qBAEDuC,EAFC,EAEDA,QAEIA,EAAKhB,QAJR,yCAKAgB,EAAKhB,SALL,gHArBM,EAgCnBkB,YAhCmB,sBAgCL,8BAAAxC,EAAA,+EAEaI,cAFb,qBAEFkC,EAFE,EAEFA,MAFE,yCAKDA,EAAKG,QALJ,gHA9BZ,EAAKJ,MAAQ,CACXtC,WAAY,MACZ2C,OAAQ,GACRC,MAAO,GACPF,OAAQ,IANO,E,wMA6CqBG,QAAQC,IAAI,CAACC,KAAKV,cAAeU,KAAKP,aAAcO,KAAKN,gB,mCAAxFE,E,KAAQC,E,KAAOF,E,KAEtBK,KAAKC,SAAS,CAAEL,OAAQA,EAAQC,MAAOA,EAAOF,OAAQA,I,qIAItD,OACE,kBAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,MAAO,CAAEC,UAAW,WACvE,kBAACrB,EAAiBsB,SAAlB,CAA2BC,MAAOT,KAAKT,MAAMI,QAC3C,kBAACO,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GACZX,KAAKT,MAAMM,OAAS,kBAAC,EAAD,CAAarB,QAASwB,KAAKT,MAAMM,MAAOpB,MAAM,uBAErE,kBAACyB,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GACZX,KAAKT,MAAMK,QAAU,kBAAC,EAAD,CAAapB,QAASwB,KAAKT,MAAMK,OAAQnB,MAAM,2B,GA3DzDmC,aAkETxB,O,gLCzDAyB,MAZf,WACE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,kBACb,kBAACU,EAAA,EAAD,UCIU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35cf4c7e.chunk.js","sourcesContent":["const apiUrl = 'https://api.themoviedb.org/3';\nconst trendingUrl = '/trending';\nconst posterSize = '/original';\nconst genres = '/genre/movie/list';\n\nexport const projectConfig = {\n  apiURI: apiUrl,\n  imgURL: 'https://image.tmdb.org/t/p' + posterSize,\n  token: process.env.REACT_APP_API_TOKEN,\n  trendingUrl: apiUrl + trendingUrl,\n  genreUrl: apiUrl + genres\n};\n","import axios from 'axios';\n\nimport { projectConfig } from '../projectConfig';\n\nconst http = axios.create({\n  baseURL: projectConfig.apiURI,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * HTTP request interceptor.\n */\nhttp.interceptors.request.use((config) => {\n  const accessToken = projectConfig.token;\n\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  return config;\n});\n\nexport default http;\n","import http from '../utils/http';\nimport { projectConfig } from '../projectConfig';\n\nexport async function fetchTrendingMedia(mediaType, timeWindow) {\n  const url = `${projectConfig.trendingUrl}/${mediaType}/${timeWindow}`;\n  const response = await http.get(url);\n\n  return response;\n}\n\nexport async function fetchGenres() {\n  const url = projectConfig.genreUrl;\n  const response = await http.get(url);\n\n  return response;\n}\n\nexport async function fetchExternalIds(tmdbId, mediaType) {\n  const url = `${projectConfig.apiURI}/${mediaType}/${tmdbId}/external_ids`;\n  const response = await http.get(url);\n\n  return response;\n}\n","import React, { Suspense } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst MediaCard = React.lazy(() => import('components/MediaCard/MediaCard'));\n\nconst MediaColumn = ({ results, title }) => (\n  <div className=\"bar\">\n    <Typography variant=\"h4\" className=\"heading\">\n      {title}\n    </Typography>\n    <div className=\"row\">\n      {results.map((result, index) => {\n        return (\n          <Suspense fallback={<CardSkeleton />} key={index}>\n            <MediaCard info={result} key={index} />\n          </Suspense>\n        );\n      })}\n    </div>\n  </div>\n);\n\nconst CardSkeleton = () => {\n  const useStyles = makeStyles(() => ({\n    root: {\n      backgroundColor: '#353940'\n    }\n  }));\n  const classes = useStyles();\n\n  return (\n    <Box>\n      <Skeleton variant=\"text\" width={200} classes={{ root: classes.root }} />\n      <Skeleton variant=\"rect\" width={864} height={300} classes={{ root: classes.root }} />\n    </Box>\n  );\n};\n\nMediaColumn.propTypes = {\n  results: PropTypes.array,\n  title: PropTypes.string\n};\nexport default MediaColumn;\n","import React, { Component } from 'react';\nimport MediaColumn from './MediaColumn';\nimport { fetchTrendingMedia, fetchGenres } from 'services/apiServices';\nimport { Grid } from '@material-ui/core';\n\nexport const DashboardContext = React.createContext();\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeWindow: 'day',\n      movies: [],\n      shows: [],\n      genres: []\n    };\n  }\n  fetchMovies = async () => {\n    try {\n      const { data } = await fetchTrendingMedia('movie', this.state.timeWindow);\n\n      if (data && data.results) {\n        return data.results;\n      }\n    } catch (error) {\n      void 0;\n    }\n  };\n\n  fetchShows = async () => {\n    try {\n      const { data } = await fetchTrendingMedia('tv', this.state.timeWindow);\n\n      if (data && data.results) {\n        return data.results;\n      }\n    } catch (error) {\n      void 0;\n    }\n  };\n  storeGenres = async () => {\n    try {\n      const { data } = await fetchGenres();\n\n      if (data) {\n        return data.genres;\n      }\n    } catch (error) {\n      void 0;\n    }\n  };\n\n  async componentDidMount() {\n    const [movies, shows, genres] = await Promise.all([this.fetchMovies(), this.fetchShows(), this.storeGenres()]);\n\n    this.setState({ movies: movies, shows: shows, genres: genres });\n  }\n\n  render() {\n    return (\n      <Grid container justify=\"center\" alignItems=\"center\" style={{ overflowY: 'hidden' }}>\n        <DashboardContext.Provider value={this.state.genres}>\n          <Grid item md={6}>\n            {this.state.shows && <MediaColumn results={this.state.shows} title=\"Trending TV Shows\" />}\n          </Grid>\n          <Grid item md={6}>\n            {this.state.movies && <MediaColumn results={this.state.movies} title=\"Trending Movies\" />}\n          </Grid>\n        </DashboardContext.Provider>\n      </Grid>\n    );\n  }\n}\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from 'components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container-wrap\">\n          <Dashboard />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          void 0;\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      void 0;\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/css/reset.css';\nimport 'assets/css/style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}